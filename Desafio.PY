@@ -0,0 +1,603 @@
{
  "nbformato" : 4 ,
  "nbformat_minor" : 0 ,
  "metadados" : {
    "colab" : {
      "proveniência" : [],
      "authorship_tag" : " ABX9TyMXDaAnp/FI+jra/XDrTGl2 "
    },
    "kernelspec" : {
      "nome" : " python3 " ,
      "display_name" : " Python 3 "
    },
    "idioma_info" : {
      "nome" : " python "
    }
  },
  "células" : [
    {
      "cell_type" : " remarcação " ,
      "fonte" : [
        " \ n " ,
        " #Modelando o Sistema Bancário em POO com Python \n " ,
        " --- \n " ,
        " \ n "
      ],
      "metadados" : {
        "id" : " Etlpljt4MVv- "
      }
    },
    {
      "cell_type" : " código " ,
      "fonte" : [
        " from abc import ABC, abstractclassmethod, abstractproperty \n " ,
        " from datetime importar datetime \n " ,
        " \ n " ,
        " \ n " ,
        " classe Cliente: \n " ,
        "     def __init__(self, endereco): \n " ,
        "         self.endereco=endereco \n " ,
        "         self.contas=[] \n " ,
        " \ n " ,
        "     def realizar_transacao(self, conta, transacao): \n " ,
        "         transacao.registrar(conta) \n " ,
        " \ n " ,
        "     def adicionar_conta(self, conta): \n " ,
        "         self.contas.append(conta) \n " ,
        " \ n " ,
        " \ n " ,
        " class PessoaFisica(Cliente): \n " ,
        "     def __init__(self, nome, data_nascimento, cpf, endereco): \n " ,
        "         super().__init__(endereço) \n " ,
        "         self.nome = nome \n " ,
        "         self.data_nascimento = data_nascimento \n " ,
        "         self.cpf = cpf \n " ,
        " \ n " ,
        " \ n " ,
        " classe Conta: \n " ,
        "     def __init__(self, numero, cliente): \n " ,
        "         self._saldo = 0 \n " ,
        "         self._numero = numero \n " ,
        "         self._agencia = \" 0001 \"\n " ,
        "         self._cliente = cliente \n " ,
        "         self._historico = Historico() \n " ,
        " \ n " ,
        "     @classmethod \n " ,
        "     def nova_conta(cls, cliente, numero): \n " ,
        "         return cls(número, cliente) \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def saldo(self): \n " ,
        "         retornar self._saldo \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def número(self): \n " ,
        "         retornar self._numero \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def agência(self): \n " ,
        "         retornar self._agencia \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def cliente(self): \n " ,
        "         retornar self._cliente \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def histórico(self): \n " ,
        "         retornar self._historico \n " ,
        " \ n " ,
        "     def sacar(self, valor): \n " ,
        "         saldo = self.saldo \n " ,
        "         excedeu_saldo = valor > saldo \n " ,
        " \ n " ,
        "         se excederu_saldo: \n " ,
        "             print( \"\\ n@@@ Operação falhou! Você não tem saldo suficiente. @@@ \" ) \n " ,
        " \ n " ,
        "         elif valor > 0: \n " ,
        "             self._saldo -= valor \n " ,
        "             print( \"\\ n=== Saque realizado com sucesso! === \" ) \n " ,
        "             retorna Verdadeiro \n " ,
        " \ n " ,
        "         senão: \n " ,
        "             print( \"\\ n@@@ Operação falhou! O valor informado é inválido. @@@ \" ) \n " ,
        " \ n " ,
        "         retornar Falso \n " ,
        " \ n " ,
        "     def depositar(self, valor): \n " ,
        "         se valor > 0: \n " ,
        "             self._saldo += valor \n " ,
        "             print( \"\\ n=== Depósito realizado com sucesso! === \" ) \n " ,
        "         senão: \n " ,
        "             print( \"\\ n@@@ Operação falhou! O valor informado é inválido. @@@ \" ) \n " ,
        "             retornar Falso \n " ,
        " \ n " ,
        "         retorna Verdadeiro \n " ,
        " \ n " ,
        " \ n " ,
        " classe ContaCorrente(Conta): \n " ,
        "     def __init__(self, numero, cliente, limite=500, limite_saques=3): \n " ,
        "         super().__init__(número, cliente) \n " ,
        "         self.limite=limite \n " ,
        "         self.limite_saques=limite_saques \n " ,
        " \ n " ,
        "     def sacar(self, valor): \n " ,
        "         numero_saques = len( \n " ,
        "             [transacao for transacao in self.historico.transacoes if transacao[ \" tipo \" ] == Saque.__name__] \n " ,
        "         ) \n " ,
        " \ n " ,
        "         excedeu_limite = valor > self.limite \n " ,
        "         excedeu_saques = numero_saques >= self.limite_saques \n " ,
        " \ n " ,
        "         se excederu_limite: \n " ,
        "             print( \"\\ n@@@ Operação falhou! O valor do saque excedeu o limite. @@@ \" ) \n " ,
        " \ n " ,
        "         elif excedeu_saques: \n " ,
        "             print( \"\\ n@@@ Operação falhou! Número máximo de saques excedidos. @@@ \" ) \n " ,
        " \ n " ,
        "         senão: \n " ,
        "             retornar super().sacar(valor) \n " ,
        " \ n " ,
        "         retornar Falso \n " ,
        " \ n " ,
        "     def __str__(self): \n " ,
        "         retornar f \"\"\"\\\n " ,
        "             Agência: \\ t{auto.agência} \n " ,
        "             C/C: \\ t \\ t{self.numero} \n " ,
        "             Titular: \\ t{self.cliente.nome} \n " ,
        "         \"\"\"\n " ,
        " \ n " ,
        " \ n " ,
        " classe Histórico: \n " ,
        "     def __init__(self): \n " ,
        "         self._transacoes = [] \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def transacoes(self): \n " ,
        "         return self._transacoes \n " ,
        " \ n " ,
        "     def adicionar_transacao(self, transacao): \n " ,
        "         self._transacoes.append( \n " ,
        "             { \ n " ,
        "                 \" tipo \" : transacao.__class__.__name__, \n " ,
        "                 \" valor \" : transacao.valor, \n " ,
        "                 \" dados \" : datetime.now().strftime( \" %d-%m-%Y %H:%M:%s \" ), \n " ,
        "             } \n " ,
        "         ) \n " ,
        " \ n " ,
        " \ n " ,
        " class Transação(ABC): \n " ,
        "     @propriedade \n " ,
        "     @abstractproperty \n " ,
        "     def valor(self): \n " ,
        "         passar \n " ,
        " \ n " ,
        "     @abstractclassmethod \n " ,
        "     def registrador(self, conta): \n " ,
        "         passar \n " ,
        " \ n " ,
        " \ n " ,
        " class Saque(Transação): \n " ,
        "     def __init__(self, valor): \n " ,
        "         self._valor = valor \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def valor(self): \n " ,
        "         return self._valor \n " ,
        " \ n " ,
        "     def registrador(self, conta): \n " ,
        "         sucesso_transacao = conta.sacar(self.valor) \n " ,
        " \ n " ,
        "         se sucesso_transacao: \n " ,
        "             conta.historico.adicionar_transacao(self) \n " ,
        " \ n " ,
        " \ n " ,
        " class Deposito(Transação): \n " ,
        "     def __init__(self, valor): \n " ,
        "         self._valor = valor \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def valor(self): \n " ,
        "         return self._valor \n " ,
        " \ n " ,
        "     def registrador(self, conta): \n " ,
        "         sucesso_transacao = conta.depositar(self.valor) \n " ,
        " \ n " ,
        "         se sucesso_transacao: \n " ,
        "             conta.historico.adicionar_transacao(self) "
      ],
      "metadados" : {
        "id" : " bmOI6W8KMc8e "
      },
      "contagem_execução" : nulo ,
      "saídas" : []
    },
    {
      "cell_type" : " código " ,
      "fonte" : [
        " importar quebra de texto \n " ,
        " from abc import ABC, abstractclassmethod, abstractproperty \n " ,
        " from datetime importar datetime \n " ,
        " \ n " ,
        " \ n " ,
        " classe Cliente: \n " ,
        "     def __init__(self, endereco): \n " ,
        "         self.endereco=endereco \n " ,
        "         self.contas=[] \n " ,
        " \ n " ,
        "     def realizar_transacao(self, conta, transacao): \n " ,
        "         transacao.registrar(conta) \n " ,
        " \ n " ,
        "     def adicionar_conta(self, conta): \n " ,
        "         self.contas.append(conta) \n " ,
        " \ n " ,
        " \ n " ,
        " class PessoaFisica(Cliente): \n " ,
        "     def __init__(self, nome, data_nascimento, cpf, endereco): \n " ,
        "         super().__init__(endereço) \n " ,
        "         self.nome = nome \n " ,
        "         self.data_nascimento = data_nascimento \n " ,
        "         self.cpf = cpf \n " ,
        " \ n " ,
        " \ n " ,
        " classe Conta: \n " ,
        "     def __init__(self, numero, cliente): \n " ,
        "         self._saldo = 0 \n " ,
        "         self._numero = numero \n " ,
        "         self._agencia = \" 0001 \"\n " ,
        "         self._cliente = cliente \n " ,
        "         self._historico = Historico() \n " ,
        " \ n " ,
        "     @classmethod \n " ,
        "     def nova_conta(cls, cliente, numero): \n " ,
        "         return cls(número, cliente) \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def saldo(self): \n " ,
        "         retornar self._saldo \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def número(self): \n " ,
        "         retornar self._numero \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def agência(self): \n " ,
        "         retornar self._agencia \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def cliente(self): \n " ,
        "         retornar self._cliente \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def histórico(self): \n " ,
        "         retornar self._historico \n " ,
        " \ n " ,
        "     def sacar(self, valor): \n " ,
        "         saldo = self.saldo \n " ,
        "         excedeu_saldo = valor > saldo \n " ,
        " \ n " ,
        "         se excederu_saldo: \n " ,
        "             print( \"\\ n@@@ Operação falhou! Você não tem saldo suficiente. @@@ \" ) \n " ,
        " \ n " ,
        "         elif valor > 0: \n " ,
        "             self._saldo -= valor \n " ,
        "             print( \"\\ n=== Saque realizado com sucesso! === \" ) \n " ,
        "             retorna Verdadeiro \n " ,
        " \ n " ,
        "         senão: \n " ,
        "             print( \"\\ n@@@ Operação falhou! O valor informado é inválido. @@@ \" ) \n " ,
        " \ n " ,
        "         retornar Falso \n " ,
        " \ n " ,
        "     def depositar(self, valor): \n " ,
        "         se valor > 0: \n " ,
        "             self._saldo += valor \n " ,
        "             print( \"\\ n=== Depósito realizado com sucesso! === \" ) \n " ,
        "         senão: \n " ,
        "             print( \"\\ n@@@ Operação falhou! O valor informado é inválido. @@@ \" ) \n " ,
        "             retornar Falso \n " ,
        " \ n " ,
        "         retorna Verdadeiro \n " ,
        " \ n " ,
        " \ n " ,
        " classe ContaCorrente(Conta): \n " ,
        "     def __init__(self, numero, cliente, limite=500, limite_saques=3): \n " ,
        "         super().__init__(número, cliente) \n " ,
        "         self._limite = limite \n " ,
        "         self._limite_saques = limite_saques \n " ,
        " \ n " ,
        "     def sacar(self, valor): \n " ,
        "         numero_saques = len( \n " ,
        "             [transacao for transacao in self.historico.transacoes if transacao[ \" tipo \" ] == Saque.__name__] \n " ,
        "         ) \n " ,
        " \ n " ,
        "         excederu_limite = valor > self._limite \n " ,
        "         excederu_saques = numero_saques >= self._limite_saques \n " ,
        " \ n " ,
        "         se excederu_limite: \n " ,
        "             print( \"\\ n@@@ Operação falhou! O valor do saque excedeu o limite. @@@ \" ) \n " ,
        " \ n " ,
        "         elif excedeu_saques: \n " ,
        "             print( \"\\ n@@@ Operação falhou! Número máximo de saques excedidos. @@@ \" ) \n " ,
        " \ n " ,
        "         senão: \n " ,
        "             retornar super().sacar(valor) \n " ,
        " \ n " ,
        "         retornar Falso \n " ,
        " \ n " ,
        "     def __str__(self): \n " ,
        "         retornar f \"\"\"\\\n " ,
        "             Agência: \\ t{auto.agência} \n " ,
        "             C/C: \\ t \\ t{self.numero} \n " ,
        "             Titular: \\ t{self.cliente.nome} \n " ,
        "         \"\"\"\n " ,
        " \ n " ,
        " \ n " ,
        " classe Histórico: \n " ,
        "     def __init__(self): \n " ,
        "         self._transacoes = [] \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def transacoes(self): \n " ,
        "         return self._transacoes \n " ,
        " \ n " ,
        "     def adicionar_transacao(self, transacao): \n " ,
        "         self._transacoes.append( \n " ,
        "             { \ n " ,
        "                 \" tipo \" : transacao.__class__.__name__, \n " ,
        "                 \" valor \" : transacao.valor, \n " ,
        "                 \" dados \" : datetime.now().strftime( \" %d-%m-%Y %H:%M:%s \" ), \n " ,
        "             } \n " ,
        "         ) \n " ,
        " \ n " ,
        " \ n " ,
        " class Transação(ABC): \n " ,
        "     @propriedade \n " ,
        "     @abstractproperty \n " ,
        "     def valor(self): \n " ,
        "         passar \n " ,
        " \ n " ,
        "     @abstractclassmethod \n " ,
        "     def registrador(self, conta): \n " ,
        "         passar \n " ,
        " \ n " ,
        " \ n " ,
        " class Saque(Transação): \n " ,
        "     def __init__(self, valor): \n " ,
        "         self._valor = valor \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def valor(self): \n " ,
        "         return self._valor \n " ,
        " \ n " ,
        "     def registrador(self, conta): \n " ,
        "         sucesso_transacao = conta.sacar(self.valor) \n " ,
        " \ n " ,
        "         se sucesso_transacao: \n " ,
        "             conta.historico.adicionar_transacao(self) \n " ,
        " \ n " ,
        " \ n " ,
        " class Deposito(Transação): \n " ,
        "     def __init__(self, valor): \n " ,
        "         self._valor = valor \n " ,
        " \ n " ,
        "     @propriedade \n " ,
        "     def valor(self): \n " ,
        "         return self._valor \n " ,
        " \ n " ,
        "     def registrador(self, conta): \n " ,
        "         sucesso_transacao = conta.depositar(self.valor) \n " ,
        " \ n " ,
        "         se sucesso_transacao: \n " ,
        "             conta.historico.adicionar_transacao(self) \n " ,
        " \ n " ,
        " \ n " ,
        " menu def(): \n " ,
        "     menu = \"\"\"\\ n \n " ,
        "     ================ MENU ================ \n " ,
        "     [1] \\ tDepositar \n " ,
        "     [2] \\ tSacar \n " ,
        "     [3] \\ tExtrato \n " ,
        "     [4] \\ tNova conta \n " ,
        "     [5] \\ listar contas \n " ,
        "     [6] \\ tNovo usuário \n " ,
        "     [0] \\ tSair \n " ,
        "     => \"\"\"\n " ,
        "     retornar entrada(textwrap.dedent(menu)) \n " ,
        " \ n " ,
        " \ n " ,
        " def filtrar_cliente(cpf, clientes): \n " ,
        "     clientes_filtrados = [cliente para cliente em clientes if cliente.cpf == cpf] \n " ,
        "     return clientes_filtrados[0] if clientes_filtrados else None \n " ,
        " \ n " ,
        " \ n " ,
        " def recuperar_conta_cliente(cliente): \n " ,
        "     se não cliente.contas: \n " ,
        "         print( \"\\ n@@@ Cliente não possui conta! @@@ \" ) \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     # FIXME: não permite que o cliente escolha a conta \n " ,
        "     return cliente.contas[0] \n " ,
        " \ n " ,
        " \ n " ,
        " def depositar(clientes): \n " ,
        "     cpf = input( \" Informe o CPF do cliente: \" ) \n " ,
        "     cliente = filtrar_cliente(cpf, clientes) \n " ,
        " \ n " ,
        "     caso não seja cliente: \n " ,
        "         print( \"\\ n@@@ Cliente não encontrado! @@@ \" ) \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     valor = float(input( \" Informe o valor do depósito: \" )) \n " ,
        "     transação = Depósito(valor) \n " ,
        " \ n " ,
        "     conta = recuperar_conta_cliente(cliente) \n " ,
        "     se não conta: \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     cliente.realizar_transacao(conta, transacao) \n " ,
        " \ n " ,
        " \ n " ,
        " def sacar(clientes): \n " ,
        "     cpf = input( \" Informe o CPF do cliente: \" ) \n " ,
        "     cliente = filtrar_cliente(cpf, clientes) \n " ,
        " \ n " ,
        "     caso não seja cliente: \n " ,
        "         print( \"\\ n@@@ Cliente não encontrado! @@@ \" ) \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     valor = float(input( \" Informe o valor do saque: \" )) \n " ,
        "     transação = Saque(valor) \n " ,
        " \ n " ,
        "     conta = recuperar_conta_cliente(cliente) \n " ,
        "     se não conta: \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     cliente.realizar_transacao(conta, transacao) \n " ,
        " \ n " ,
        " \ n " ,
        " def exibir_extrato(clientes): \n " ,
        "     cpf = input( \" Informe o CPF do cliente: \" ) \n " ,
        "     cliente = filtrar_cliente(cpf, clientes) \n " ,
        " \ n " ,
        "     caso não seja cliente: \n " ,
        "         print( \"\\ n@@@ Cliente não encontrado! @@@ \" ) \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     conta = recuperar_conta_cliente(cliente) \n " ,
        "     se não conta: \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     imprimir( \"\\ n================ EXTRATO ================ \" ) \n " ,
        "     transacoes = conta.historico.transacoes \n " ,
        " \ n " ,
        "     extrato = \"\"\n " ,
        "     se não transações: \n " ,
        "         extrato = \" Não foram realizadas movimentações. \"\n " ,
        "     senão: \n " ,
        "         para transação em transações: \n " ,
        "             extrato += f \"\\ n{transacao['tipo']}: \\ n \\ tR$ {transacao['valor']:.2f} \"\n " ,
        " \ n " ,
        "     print(extrato) \n " ,
        "     print(f \"\\ nSaldo: \\ n \\ tR$ {conta.saldo:.2f} \" ) \n " ,
        "     imprimir( \" ========================================= \" ) \n " ,
        " \ n " ,
        " \ n " ,
        " def criar_cliente(clientes): \n " ,
        "     cpf = input( \" Informe o CPF (somente número): \" ) \n " ,
        "     cliente = filtrar_cliente(cpf, clientes) \n " ,
        " \ n " ,
        "     se cliente: \n " ,
        "         print( \"\\ n@@@ Já existe cliente com esse CPF! @@@ \" ) \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     nome = input( \" Informe o nome completo: \" ) \n " ,
        "     data_nascimento = input( \" Informe a data de nascimento (dd-mm-aaaa): \" ) \n " ,
        "     endereco = input( \" Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): \" ) \n " ,
        " \ n " ,
        "     cliente = PessoaFisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco) \n " ,
        " \ n " ,
        "     clientes.append(cliente) \n " ,
        " \ n " ,
        "     print( \"\\ n=== Cliente criado com sucesso! === \" ) \n " ,
        " \ n " ,
        " \ n " ,
        " def criar_conta(numero_conta, clientes, contas): \n " ,
        "     cpf = input( \" Informe o CPF do cliente: \" ) \n " ,
        "     cliente = filtrar_cliente(cpf, clientes) \n " ,
        " \ n " ,
        "     caso não seja cliente: \n " ,
        "         print( \"\\ n@@@ Cliente não encontrado, fluxo de criação de conta encerrado! @@@ \" ) \n " ,
        "         retornar \n " ,
        " \ n " ,
        "     conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta) \n " ,
        "     contas.append(conta) \n " ,
        "     cliente.contas.append(conta) \n " ,
        " \ n " ,
        "     print( \"\\ n=== Conta criada com sucesso! === \" ) \n " ,
        " \ n " ,
        " \ n " ,
        " def listar_contas(contas): \n " ,
        "     para conta em contas: \n " ,
        "         imprimir( \" = \" * 100) \n " ,
        "         print(textwrap.dedent(str(conta))) \n " ,
        " \ n " ,
        " \ n " ,
        " def main(): \n " ,
        "     clientes = [] \n " ,
        "     contas = [] \n " ,
        " \ n " ,
        "     enquanto Verdadeiro: \n " ,
        "         opção = menu() \n " ,
        " \ n " ,
        "         if opcao == \" 1 \" : \n " ,
        "             depositar(clientes) \n " ,
        " \ n " ,
        "         elif opcao == \" 2 \" : \n " ,
        "             sacar(clientes) \n " ,
        " \ n " ,
        "         elif opcao == \" 3 \" : \n " ,
        "             exibir_extrato(clientes) \n " ,
        " \ n " ,
        "         elif opcao == \" 4 \" : \n " ,
        "             criar_cliente(clientes) \n " ,
        " \ n " ,
        "         elif opcao == \" 5 \" : \n " ,
        "             numero_conta = len(contas) + 1 \n " ,
        "             criar_conta(numero_conta, clientes, contas) \n " ,
        " \ n " ,
        "         elif opcao == \" 6 \" : \n " ,
        "             listar_contas(contas) \n " ,
        " \ n " ,
        "         elif opcao == \" 0 \" : \n " ,
        "             quebrar \n " ,
        " \ n " ,
        "         senão: \n " ,
        "             print( \"\\ n@@@ Operação inválida, por favor selecione novamente a operação desejada. @@@ \" ) \n " ,
        " \ n " ,
        " \ n " ,
        " principal() "
      ],
      "metadados" : {
        "colab" : {
          "base_uri" : " https://localhost:8080/ "
        },
        "id" : " OlB5iEd_MlPF " ,
        "outputId" : " 6101b145-7df1-4e17-c9c6-8532606a0c47 "
      },
      "contagem_execução" : nulo ,
      "saídas" : [
        {
          "output_type" : " fluxo " ,
          "nome" : " stdout " ,
          "texto" : [
            " \ n " ,
            " \ n " ,
            " ================ MENU ================ \n " ,
            " [1] \t Depositário \n " ,
            " [2] \t Sacar \n " ,
            " [3] \t Extrato \n " ,
            " [4] \t Nova conta \n " ,
            " [5] \t Listar contas \n " ,
            " [6] \t Novo usuário \n " ,
            " [0] \t Sair \n " ,
            " => 6 \n " ,
            " \ n " ,
            " \ n " ,
            " ================ MENU ================ \n " ,
            " [1] \t Depositário \n " ,
            " [2] \t Sacar \n " ,
            " [3] \t Extrato \n " ,
            " [4] \t Nova conta \n " ,
            " [5] \t Listar contas \n " ,
            " [6] \t Novo usuário \n " ,
            " [0] \t Sair \n " ,
            " => 1 \n " ,
            " Informe o CPF do cliente: 06555555 \n " ,
            " \ n " ,
            " @@@ Cliente não encontrado! @@@ \n "